diff -rupNEZbB OriginalSources/usr/src/include/unistd.h Sources/usr/src/include/unistd.h
--- OriginalSources/usr/src/include/unistd.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/include/unistd.h	2021-05-06 21:05:28.270622516 +0200
@@ -84,6 +84,7 @@
 #include <sys/null.h>
 
 __BEGIN_DECLS
+int	 setbid(int);
 __dead	 void _exit(int);
 int	 access(const char *, int);
 unsigned int alarm(unsigned int);
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/Makefile.inc Sources/usr/src/lib/libc/misc/Makefile.inc
--- OriginalSources/usr/src/lib/libc/misc/Makefile.inc	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/lib/libc/misc/Makefile.inc	2021-05-06 21:11:27.427767476 +0200
@@ -4,7 +4,7 @@
 .PATH: ${ARCHDIR}/misc ${.CURDIR}/misc
 
 # constructor
-SRCS+=	initfini.c
+SRCS+=	initfini.c setbid.c
 
 # for -fstack-protector
 SRCS+=	stack_protector.c
diff -rupNEZbB OriginalSources/usr/src/lib/libc/misc/setbid.c Sources/usr/src/lib/libc/misc/setbid.c
--- OriginalSources/usr/src/lib/libc/misc/setbid.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/lib/libc/misc/setbid.c	2021-05-09 17:52:31.952626366 +0200
@@ -0,0 +1,13 @@
+#include <unistd.h>
+#include <lib.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <minix/rs.h>
+
+int setbid(int bid) /* so_2021 */
+{
+	message m;
+	m.m_bid.bid = bid;
+
+	return _syscall(PM_PROC_NR, PM_SETBID, &m);
+}
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/callnr.h Sources/usr/src/minix/include/minix/callnr.h
--- OriginalSources/usr/src/minix/include/minix/callnr.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/callnr.h	2021-05-06 19:55:26.484460418 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_SETBID		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/com.h Sources/usr/src/minix/include/minix/com.h
--- OriginalSources/usr/src/minix/include/minix/com.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/com.h	2021-05-10 16:08:57.476137105 +0200
@@ -439,6 +439,7 @@
 					 * RTS_NO_QUANTUM; otherwise caller is 
 					 * marked scheduler 
 					 */
+# define SCHEDCTL_FLAG_SET_BID 	42	/* setting bid flag */
 
 /* Field names for SYS_PADCONF */
 #define PADCONF_PADCONF		m2_i1	/* pad to configure */
@@ -763,6 +764,7 @@
 #define SCHEDULING_STOP		(SCHEDULING_BASE+3)
 #define SCHEDULING_SET_NICE	(SCHEDULING_BASE+4)
 #define SCHEDULING_INHERIT	(SCHEDULING_BASE+5)
+#define SCHEDULING_SET_NICE_BID	(SCHEDULING_BASE+6)
 
 /*===========================================================================*
  *              Messages for USB                                             *
diff -rupNEZbB OriginalSources/usr/src/minix/include/minix/ipc.h Sources/usr/src/minix/include/minix/ipc.h
--- OriginalSources/usr/src/minix/include/minix/ipc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/include/minix/ipc.h	2021-05-09 13:42:06.585776496 +0200
@@ -12,6 +12,11 @@
  *==========================================================================*/ 
 
 #define M_PATH_STRING_MAX  40
+typedef struct {
+	int bid;
+	uint8_t padding[52];
+} mess_bid;
+_ASSERT_MSG_SIZE(mess_bid);
 
 typedef struct {
 	uint8_t data[56];
@@ -1588,6 +1593,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_nice);
 
 typedef struct {
+	endpoint_t endpoint;
+	int bid;
+
+	uint8_t padding[48];
+} mess_pm_sched_scheduling_set_nice_bid;
+_ASSERT_MSG_SIZE(mess_pm_sched_scheduling_set_nice_bid);
+
+typedef struct {
 	int status;
 
 	uint8_t padding[52];
@@ -2027,6 +2040,7 @@ typedef struct {
 	endpoint_t m_source;		/* who sent the message */
 	int m_type;			/* what kind of message is it */
 	union {
+		mess_bid		m_bid;
 		mess_u8			m_u8;
 		mess_u16		m_u16;
 		mess_u32		m_u32;
@@ -2208,6 +2222,7 @@ typedef struct {
 		mess_pm_lsys_getprocnr	m_pm_lsys_getprocnr;
 		mess_pm_lsys_sigs_signal m_pm_lsys_sigs_signal;
 		mess_pm_sched_scheduling_set_nice m_pm_sched_scheduling_set_nice;
+		mess_pm_sched_scheduling_set_nice_bid m_pm_sched_scheduling_set_nice_bid;
 		mess_readclock_lc_rtcdev m_readclock_lc_rtcdev;
 		mess_rs_init		m_rs_init;
 		mess_rs_pm_exec_restart	m_rs_pm_exec_restart;
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proc.c Sources/usr/src/minix/kernel/proc.c
--- OriginalSources/usr/src/minix/kernel/proc.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/proc.c	2021-05-10 19:00:35.927319352 +0200
@@ -116,7 +116,7 @@ static void set_idle_name(char * name, i
 		break;							\
 	}
 
-void proc_init(void)
+void proc_init(void) /* so_2021 */
 {
 	struct proc * rp;
 	struct priv *sp;
@@ -134,7 +134,7 @@ void proc_init(void)
 		rp->p_scheduler = NULL;		/* no user space scheduler */
 		rp->p_priority = 0;		/* no priority */
 		rp->p_quantum_size_ms = 0;	/* no quantum size */
-
+		rp->bid = 0;			/* standard scheduling */
 		/* arch-specific initialization */
 		arch_proc_reset(rp);
 	}
@@ -1711,7 +1711,7 @@ void dequeue(struct proc *rp)
 /*===========================================================================*
  *				pick_proc				     * 
  *===========================================================================*/
-static struct proc * pick_proc(void)
+static struct proc * pick_proc(void) /* so_2021 */
 {
 /* Decide who to run now.  A new process is selected an returned.
  * When a billable process is selected, record it in 'bill_ptr', so that the 
@@ -1722,6 +1722,8 @@ static struct proc * pick_proc(void)
   register struct proc *rp;			/* process to run */
   struct proc **rdy_head;
   int q;				/* iterate over queues */
+  int me_unique, lowest_unique, highest_not_unique;
+  struct proc *chosen;
 
   /* Check each of the scheduling queues for ready processes. The number of
    * queues is defined in proc.h, and priorities are set in the task table.
@@ -1733,6 +1735,35 @@ static struct proc * pick_proc(void)
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
 	}
+	if(q == AUCTION_Q) {
+		lowest_unique = MAX_BID + 1;
+		chosen = rp;
+		for(struct proc *it = rp; it != NULL; it = it->p_nextready) {
+			me_unique = 1;
+			for(struct proc *q_elem = rp; q_elem != NULL; q_elem = q_elem->p_nextready) {
+				if (q_elem != it && q_elem->bid == it->bid) {
+					me_unique = 0;
+					break;
+				}
+			}
+
+			if (me_unique && it->bid < lowest_unique) {
+				lowest_unique = it->bid;
+				chosen = it;
+			}
+		}
+
+		if (lowest_unique == MAX_BID + 1) {  /* no uniques */
+			highest_not_unique = 0;
+			for(struct proc *q_elem = rp; q_elem != NULL; q_elem = q_elem->p_nextready) {
+				if (q_elem->bid > highest_not_unique) {
+					highest_not_unique = q_elem->bid;
+					chosen = q_elem;
+				}
+			}
+		}
+		rp = chosen;
+	}
 	assert(proc_is_runnable(rp));
 	if (priv(rp)->s_flags & BILLABLE)	 	
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/proc.h Sources/usr/src/minix/kernel/proc.h
--- OriginalSources/usr/src/minix/kernel/proc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/proc.h	2021-05-08 23:34:16.641959682 +0200
@@ -19,6 +19,9 @@
 #include "const.h"
 #include "priv.h"
 
+#define AUCTION_Q 8
+#define MAX_BID 100
+
 struct proc {
   struct stackframe_s p_reg;	/* process' registers saved in stack frame */
   struct segframe p_seg;	/* segment descriptors */
@@ -127,7 +130,7 @@ struct proc {
   struct { reg_t r1, r2, r3; } p_defer;
 
   u64_t p_signal_received;
-
+  int bid;			/* process' special scheduling priority */
 #if DEBUG_TRACE
   int p_schedules;
 #endif
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_fork.c Sources/usr/src/minix/kernel/system/do_fork.c
--- OriginalSources/usr/src/minix/kernel/system/do_fork.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/system/do_fork.c	2021-05-09 23:55:14.009646772 +0200
@@ -23,7 +23,7 @@
 /*===========================================================================*
  *				do_fork					     *
  *===========================================================================*/
-int do_fork(struct proc * caller, message * m_ptr)
+int do_fork(struct proc * caller, message * m_ptr) /* so_2021 */
 {
 /* Handle sys_fork().
  * m_lsys_krn_sys_fork.endpt has forked.
@@ -75,6 +75,8 @@ int do_fork(struct proc * caller, messag
   rpc->p_user_time = 0;		/* set all the accounting times to 0 */
   rpc->p_sys_time = 0;
 
+  rpc->bid = 0;			/* child always has standard scheduling enabled */
+
   rpc->p_misc_flags &=
 	~(MF_VIRT_TIMER | MF_PROF_TIMER | MF_SC_TRACE | MF_SPROF_SEEN | MF_STEP);
   rpc->p_virt_left = 0;		/* disable, clear the process-virtual timers */
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_schedctl.c Sources/usr/src/minix/kernel/system/do_schedctl.c
--- OriginalSources/usr/src/minix/kernel/system/do_schedctl.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/system/do_schedctl.c	2021-05-10 16:17:37.870829118 +0200
@@ -4,7 +4,7 @@
 /*===========================================================================*
  *			          do_schedctl			     *
  *===========================================================================*/
-int do_schedctl(struct proc * caller, message * m_ptr)
+int do_schedctl(struct proc * caller, message * m_ptr) /* so_2021 */
 {
 	struct proc *p;
 	uint32_t flags;
@@ -14,7 +14,7 @@ int do_schedctl(struct proc * caller, me
 
 	/* check parameter validity */
 	flags = m_ptr->m_lsys_krn_schedctl.flags;
-	if (flags & ~SCHEDCTL_FLAG_KERNEL) {
+	if ((flags & ~SCHEDCTL_FLAG_KERNEL) && (flags & ~SCHEDCTL_FLAG_SET_BID)) {
 		printf("do_schedctl: flags 0x%x invalid, caller=%d\n", 
 			flags, caller - proc);
 		return EINVAL;
@@ -25,11 +25,38 @@ int do_schedctl(struct proc * caller, me
 
 	p = proc_addr(proc_nr);
 
-	if ((flags & SCHEDCTL_FLAG_KERNEL) == SCHEDCTL_FLAG_KERNEL) {
+
+	if ((flags & SCHEDCTL_FLAG_SET_BID) == SCHEDCTL_FLAG_SET_BID)  {
+	       	/* when flag equals SCHEDCTL_FLAG_BID bid is in priority */
+		priority = m_ptr->m_lsys_krn_schedctl.priority;
+
+		if (priority >= 0 && priority <= 100) {
+			if ((priority == 0 && p->bid == 0) ||
+			    (priority != 0 && p->bid != 0)) {
+				return EPERM;
+			}
+			else {
+				p->bid = priority;
+			}
+
+		}
+		else {
+			return EINVAL;
+		}	
+	}
+	else if ((flags & SCHEDCTL_FLAG_KERNEL) == SCHEDCTL_FLAG_KERNEL) {
 		/* the kernel becomes the scheduler and starts 
 		 * scheduling the process.
 		 */
+		if (p->bid != 0) {
+			priority = AUCTION_Q;
+		}
+		else if (m_ptr->m_lsys_krn_schedctl.priority == AUCTION_Q) {
+			priority = AUCTION_Q + 1;
+		}
+		else {
 		priority = m_ptr->m_lsys_krn_schedctl.priority;
+		}
 		quantum = m_ptr->m_lsys_krn_schedctl.quantum;
 		cpu = m_ptr->m_lsys_krn_schedctl.cpu;
 
diff -rupNEZbB OriginalSources/usr/src/minix/kernel/system/do_schedule.c Sources/usr/src/minix/kernel/system/do_schedule.c
--- OriginalSources/usr/src/minix/kernel/system/do_schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/kernel/system/do_schedule.c	2021-05-10 01:46:39.267828054 +0200
@@ -5,7 +5,7 @@
 /*===========================================================================*
  *				do_schedule				     *
  *===========================================================================*/
-int do_schedule(struct proc * caller, message * m_ptr)
+int do_schedule(struct proc * caller, message * m_ptr) /* so_2021 */
 {
 	struct proc *p;
 	int proc_nr;
@@ -21,7 +21,16 @@ int do_schedule(struct proc * caller, me
 		return(EPERM);
 
 	/* Try to schedule the process. */
+	if (p->bid != 0) {
+		priority = AUCTION_Q;
+	}
+	else if (m_ptr->m_lsys_krn_schedule.priority == AUCTION_Q) {
+		priority = AUCTION_Q + 1;
+	}
+	else {
 	priority = m_ptr->m_lsys_krn_schedule.priority;
+	}
+
 	quantum = m_ptr->m_lsys_krn_schedule.quantum;
 	cpu = m_ptr->m_lsys_krn_schedule.cpu;
 
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/Makefile Sources/usr/src/minix/servers/pm/Makefile
--- OriginalSources/usr/src/minix/servers/pm/Makefile	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/Makefile	2021-05-08 23:36:14.667626480 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c setbid.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/proto.h Sources/usr/src/minix/servers/pm/proto.h
--- OriginalSources/usr/src/minix/servers/pm/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/proto.h	2021-05-08 23:37:00.655393072 +0200
@@ -4,6 +4,9 @@ struct mproc;
 
 #include <minix/timers.h>
 
+/* setbid.c */
+int do_setbid(void);
+
 /* alarm.c */
 int do_itimer(void);
 void set_alarm(struct mproc *rmp, clock_t ticks);
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/setbid.c Sources/usr/src/minix/servers/pm/setbid.c
--- OriginalSources/usr/src/minix/servers/pm/setbid.c	1970-01-01 01:00:00.000000000 +0100
+++ Sources/usr/src/minix/servers/pm/setbid.c	2021-05-10 16:00:03.740318953 +0200
@@ -0,0 +1,13 @@
+#include "pm.h"
+#include "mproc.h"
+#include <lib.h>
+
+int do_setbid(void) /* so_2021 */
+{
+	message m;
+	m.m_pm_sched_scheduling_set_nice_bid.bid = m_in.m_bid.bid;
+	m.m_pm_sched_scheduling_set_nice_bid.endpoint = mp->mp_endpoint;
+	
+	return _taskcall(mp->mp_scheduler, SCHEDULING_SET_NICE_BID, &m); 
+	/* taskcall returns error codes directly, not in errno */ 
+}
diff -rupNEZbB OriginalSources/usr/src/minix/servers/pm/table.c Sources/usr/src/minix/servers/pm/table.c
--- OriginalSources/usr/src/minix/servers/pm/table.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/pm/table.c	2021-05-08 23:26:29.983738474 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(PM_SETBID)		= do_setbid		/* getsetbid(2) */
 };
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/main.c Sources/usr/src/minix/servers/sched/main.c
--- OriginalSources/usr/src/minix/servers/sched/main.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/main.c	2021-05-08 23:43:12.249828241 +0200
@@ -18,7 +18,7 @@ struct machine machine;		/* machine info
 /*===========================================================================*
  *				main					     *
  *===========================================================================*/
-int main(void)
+int main(void) /* so_2021 */
 {
 	/* Main routine of the scheduler. */
 	message m_in;	/* the incoming message itself is kept here. */
@@ -70,6 +70,9 @@ int main(void)
 		case SCHEDULING_SET_NICE:
 			result = do_nice(&m_in);
 			break;
+		case SCHEDULING_SET_NICE_BID:
+			result = do_nice_bid(&m_in);
+			break;
 		case SCHEDULING_NO_QUANTUM:
 			/* This message was sent from the kernel, don't reply */
 			if (IPC_STATUS_FLAGS_TEST(ipc_status,
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/proto.h Sources/usr/src/minix/servers/sched/proto.h
--- OriginalSources/usr/src/minix/servers/sched/proto.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/proto.h	2021-05-08 23:41:58.871818268 +0200
@@ -12,6 +12,7 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
+int do_nice_bid(message *m_ptr);
 void init_scheduling(void);
 
 /* utility.c */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/schedproc.h Sources/usr/src/minix/servers/sched/schedproc.h
--- OriginalSources/usr/src/minix/servers/sched/schedproc.h	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/schedproc.h	2021-05-09 01:31:47.229219892 +0200
@@ -33,6 +33,7 @@ EXTERN struct schedproc {
 	bitchunk_t cpu_mask[BITMAP_CHUNKS(CONFIG_MAX_CPUS)]; /* what CPUs is the
 								process allowed
 								to run on */
+	int bid;		/* bid needed for extra scheduling algorithm */
 } schedproc[NR_PROCS];
 
 /* Flag values */
diff -rupNEZbB OriginalSources/usr/src/minix/servers/sched/schedule.c Sources/usr/src/minix/servers/sched/schedule.c
--- OriginalSources/usr/src/minix/servers/sched/schedule.c	2014-09-13 23:56:50.000000000 +0200
+++ Sources/usr/src/minix/servers/sched/schedule.c	2021-05-10 16:13:32.866763163 +0200
@@ -87,7 +87,7 @@ static void pick_cpu(struct schedproc *
  *				do_noquantum				     *
  *===========================================================================*/
 
-int do_noquantum(message *m_ptr)
+int do_noquantum(message *m_ptr) /* so_2021 */
 {
 	register struct schedproc *rmp;
 	int rv, proc_nr_n;
@@ -99,8 +99,16 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
+	if(rmp->bid != 0) {
+		rmp->priority = AUCTION_Q;
+	}
+	else if (rmp->priority < MIN_USER_Q) {
+		if(rmp->priority == AUCTION_Q - 1) {
+			rmp->priority += 2;	/* lower priority */
+		}
+		else {
+			rmp->priority += 1; 	/* lower priority when no scheduling with lowest unique bid */
+		}
 	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
@@ -140,7 +148,7 @@ int do_stop_scheduling(message *m_ptr)
 /*===========================================================================*
  *				do_start_scheduling			     *
  *===========================================================================*/
-int do_start_scheduling(message *m_ptr)
+int do_start_scheduling(message *m_ptr) /* so_2021 */
 {
 	register struct schedproc *rmp;
 	int rv, proc_nr_n, parent_nr_n;
@@ -164,6 +172,7 @@ int do_start_scheduling(message *m_ptr)
 	rmp->endpoint     = m_ptr->m_lsys_sched_scheduling_start.endpoint;
 	rmp->parent       = m_ptr->m_lsys_sched_scheduling_start.parent;
 	rmp->max_priority = m_ptr->m_lsys_sched_scheduling_start.maxprio;
+	rmp->bid          = 0;  
 	if (rmp->max_priority >= NR_SCHED_QUEUES) {
 		return EINVAL;
 	}
@@ -207,7 +216,12 @@ int do_start_scheduling(message *m_ptr)
 				&parent_nr_n)) != OK)
 			return rv;
 
+		if (schedproc[parent_nr_n].priority == AUCTION_Q) {
+			rmp->priority = AUCTION_Q + 1;
+		}
+		else {
 		rmp->priority = schedproc[parent_nr_n].priority;
+		}
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
 		break;
 		
@@ -254,7 +268,7 @@ int do_start_scheduling(message *m_ptr)
 /*===========================================================================*
  *				do_nice					     *
  *===========================================================================*/
-int do_nice(message *m_ptr)
+int do_nice(message *m_ptr) /* so_2021 */
 {
 	struct schedproc *rmp;
 	int rv;
@@ -277,6 +291,13 @@ int do_nice(message *m_ptr)
 		return EINVAL;
 	}
 
+	if (rmp->bid != 0) {
+		new_q = AUCTION_Q;
+	}
+	else if (new_q == AUCTION_Q) {
+		new_q = AUCTION_Q + 1;
+	}
+
 	/* Store old values, in case we need to roll back the changes */
 	old_q     = rmp->priority;
 	old_max_q = rmp->max_priority;
@@ -295,6 +316,50 @@ int do_nice(message *m_ptr)
 }
 
 /*===========================================================================*
+ *				do_nice_bid					     *
+ *===========================================================================*/
+
+int do_nice_bid(message *m_ptr) /* so_2021 */
+{
+	struct schedproc *rmp;
+	int rv;
+	int proc_nr_n;
+	unsigned old_q;
+
+	/* check who can send you requests */
+	if (!accept_message(m_ptr))
+		return EPERM;
+
+	if (sched_isokendpt(m_ptr->m_pm_sched_scheduling_set_nice_bid.endpoint, &proc_nr_n) != OK) {
+		printf("SCHED: WARNING: got an invalid endpoint in OoQ msg "
+		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice_bid.endpoint);
+		return EBADEPT;
+	}
+
+	rmp = &schedproc[proc_nr_n];
+	old_q = rmp->priority;
+
+	if(m_ptr->m_pm_sched_scheduling_set_nice_bid.bid != 0) {
+		rmp->priority = AUCTION_Q;
+	}
+	else {
+		rmp->priority = rmp->max_priority;
+	}	
+
+
+	rv = sys_schedctl(SCHEDCTL_FLAG_SET_BID,  rmp->endpoint,
+		m_ptr->m_pm_sched_scheduling_set_nice_bid.bid, -1, -1);	
+	if(rv < 0) {
+		rmp->priority = old_q; /* rollback changes */
+	}
+	else {
+		rmp->bid = m_ptr->m_pm_sched_scheduling_set_nice_bid.bid;
+	}
+
+	return rv;
+}	
+
+/*===========================================================================*
  *				schedule_process			     *
  *===========================================================================*/
 static int schedule_process(struct schedproc * rmp, unsigned flags)
@@ -349,15 +413,24 @@ void init_scheduling(void)
  * quantum. This function will find all proccesses that have been bumped down,
  * and pulls them back up. This default policy will soon be changed.
  */
-static void balance_queues(minix_timer_t *tp)
+static void balance_queues(minix_timer_t *tp) /* so_2021 */
 {
 	struct schedproc *rmp;
 	int proc_nr;
 
 	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
 		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
+			if(rmp->bid != 0) {
+				rmp->priority = AUCTION_Q;
+				schedule_process_local(rmp);
+			}
+			else if (rmp->priority > rmp->max_priority) {
+				if(rmp->priority == AUCTION_Q + 1) {
+					rmp->priority -= 2;
+				}
+				else {
 				rmp->priority -= 1; /* increase priority */
+				}
 				schedule_process_local(rmp);
 			}
 		}
